from launch import LaunchDescription
from launch_ros.actions import Node, ComposableNodeContainer
from launch_ros.descriptions import ComposableNode

from ament_index_python.packages import get_package_share_directory
import os

def generate_launch_description():
    # 各パッケージの share ディレクトリを取得
    urg_node2_share = get_package_share_directory('urg_node2')
    laser_scan_merger_share = get_package_share_directory('laser_scan_merger')

    # 各種パラメータファイルへのパス
    param_urg1 = os.path.join(urg_node2_share, 'config', 'params_ether.yaml')
    param_urg2 = os.path.join(urg_node2_share, 'config', 'params_ether_2nd.yaml')
    param_merger = os.path.join(laser_scan_merger_share, 'config', 'kimoto_ust', 'param.yaml')

    return LaunchDescription([
        # 1つ目の LiDAR ノード
        Node(
            package='urg_node2',
            executable='urg_node2_node',
            name='urg_node2_1st',
            output='screen',
            parameters=[param_urg1],
            remappings=[('/scan', '/scan_1st')],
        ),

        # 2つ目の LiDAR ノード
        Node(
            package='urg_node2',
            executable='urg_node2_node',
            name='urg_node2_2nd',
            output='screen',
            parameters=[param_urg2],
            remappings=[('/scan', '/scan_2nd')],
        ),

        # 1st LiDARのTF
        Node(
            package='tf2_ros',
            executable='static_transform_publisher',
            name='static_tf_laser_1',
            output='screen',
            arguments=['--x', '0', '--y', '0', '--z', '0',
                       '--roll', '0', '--pitch', '0', '--yaw', '0',
                       '--frame-id', 'base_link', '--child-frame-id', 'laser_frame_1']
        ),

        # 2ndLiDARのTF（180度回転）
        Node(
            package='tf2_ros',
            executable='static_transform_publisher',
            name='static_tf_laser_2',
            output='screen',
            arguments=['--x', '0', '--y', '0.25', '--z', '0',
                       '--roll', '0', '--pitch', '0', '--yaw', '3.1415926535',
                       '--frame-id', 'base_link', '--child-frame-id', 'laser_frame_2']
        ),

        # laser_scan_merger をコンポーネントとして起動
        ComposableNodeContainer(
            name='laser_scan_merger_container',
            namespace='',
            package='rclcpp_components',
            executable='component_container',
            output='screen',
            composable_node_descriptions=[
                ComposableNode(
                    package='laser_scan_merger',
                    plugin='util::LaserScanMerger',
                    name='laser_scan_merger_node',
                    parameters=[param_merger],
                ),
            ]
        )
    ])

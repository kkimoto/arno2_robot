from launch import LaunchDescription
from launch_ros.actions import Node

from ament_index_python.packages import get_package_share_directory
import os

def generate_launch_description():

    package_share_dir = get_package_share_directory('arno_robot')
    this_dir = os.path.dirname(os.path.realpath(__file__))

    arno_robot_share_dir = get_package_share_directory('arno_robot')
    urg_node2_share_dir  = get_package_share_directory('urg_node2')
    laser_scan_merger_share = get_package_share_directory('laser_scan_merger')

    param_urg1 = os.path.join(urg_node2_share_dir, 'config', 'params_ether.yaml')
    param_urg2 = os.path.join(urg_node2_share_dir, 'config', 'params_ether_2nd.yaml')
    param_merger = os.path.join(laser_scan_merger_share, 'config', 'kimoto_ust', 'param.yaml')

    return LaunchDescription([
        # First LiDAR node
        Node(
            package='urg_node2',
            executable='urg_node2_node',
            name='urg_node2_1st',
            output='screen',
            parameters=[param_urg1],
            remappings=[('/scan', '/scan_1st')],
        ),

        # Second LiDAR node
        Node(
            package='urg_node2',
            executable='urg_node2_node',
            name='urg_node2_2nd',
            output='screen',
            parameters=[param_urg2],
            remappings=[('/scan', '/scan_2nd')],
        ),

        # Static transform publisher for first lidar (base_link -> laser_front)
        Node(
            package='tf2_ros',
            executable='static_transform_publisher',
            name='static_tf_laser_front',
            output='screen',
            arguments=['--x', '0', '--y', '0', '--z', '0',
                       '--roll', '0', '--pitch', '0', '--yaw', '0',
                       '--frame-id', 'base_link', '--child-frame-id', 'laser_front']
        ),

        # Static transform publisher for second lidar (base_link -> laser_back)
        Node(
            package='tf2_ros',
            executable='static_transform_publisher',
            name='static_tf_laser_back',
            output='screen',
            arguments=['--x', '0', '--y', '0', '--z', '0',
                       '--roll', '0', '--pitch', '0', '--yaw', '3.1415926535',
                       '--frame-id', 'base_link', '--child-frame-id', 'laser_back']
        ),

        # Laser scan merger node
        Node(
            package='laser_scan_merger',
            executable='laser_scan_merger_node',
            name='laser_scan_merger_node',
            output='screen',
            parameters=[param_merger],
        ),
    ])

from launch import LaunchDescription
from launch.actions import TimerAction, EmitEvent
from launch_ros.actions import LifecycleNode, ComposableNodeContainer, Node
from launch_ros.descriptions import ComposableNode
from launch_ros.events.lifecycle import ChangeState
from launch.substitutions import LaunchConfiguration
from ament_index_python.packages import get_package_share_directory
from lifecycle_msgs.msg import Transition
import os

def generate_launch_description():
    urg_node2_share = get_package_share_directory('urg_node2')
    laser_scan_merger_share = get_package_share_directory('laser_scan_merger')

    param_urg1 = os.path.join(urg_node2_share, 'config', 'params_ether.yaml')
    param_urg2 = os.path.join(urg_node2_share, 'config', 'params_ether_2nd.yaml')
    param_merger = os.path.join(laser_scan_merger_share, 'config', 'kimoto_ust', 'param.yaml')

    # urg_node2_1st
    node_1st = LifecycleNode(
        package='urg_node2',
        executable='urg_node2_node',
        name='urg_node2_1st',
        namespace='',
        parameters=[param_urg1],
        remappings=[('scan', 'scan_1st')],
        output='screen'
    )

    # urg_node2_2nd
    node_2nd = LifecycleNode(
        package='urg_node2',
        executable='urg_node2_node',
        name='urg_node2_2nd',
        namespace='',
        parameters=[param_urg2],
        remappings=[('scan', 'scan_2nd')],
        output='screen'
    )

    return LaunchDescription([
        # urg_node2
        node_1st,
        node_2nd,

        # Configure + Activate after delay
        TimerAction(period=2.0, actions=[
            EmitEvent(event=ChangeState(lifecycle_node_matcher=lambda action: action.name == 'urg_node2_1st', transition_id=Transition.TRANSITION_CONFIGURE)),
            EmitEvent(event=ChangeState(lifecycle_node_matcher=lambda action: action.name == 'urg_node2_1st', transition_id=Transition.TRANSITION_ACTIVATE)),
            EmitEvent(event=ChangeState(lifecycle_node_matcher=lambda action: action.name == 'urg_node2_2nd', transition_id=Transition.TRANSITION_CONFIGURE)),
            EmitEvent(event=ChangeState(lifecycle_node_matcher=lambda action: action.name == 'urg_node2_2nd', transition_id=Transition.TRANSITION_ACTIVATE)),
        ]),

        # TF 1
        Node(
            package='tf2_ros',
            executable='static_transform_publisher',
            name='static_tf_laser_1',
            output='screen',
            arguments=['--x', '0', '--y', '0', '--z', '0',
                       '--roll', '0', '--pitch', '0', '--yaw', '0',
                       '--frame-id', 'base_link', '--child-frame-id', 'laser_frame_1']
        ),

        # TF 2
        Node(
            package='tf2_ros',
            executable='static_transform_publisher',
            name='static_tf_laser_2',
            output='screen',
            arguments=['--x', '0', '--y', '0.25', '--z', '0',
                       '--roll', '0', '--pitch', '0', '--yaw', '3.1415926535',
                       '--frame-id', 'base_link', '--child-frame-id', 'laser_frame_2']
        ),

        # laser_scan_merger
        ComposableNodeContainer(
            name='laser_scan_merger_container',
            namespace='',
            package='rclcpp_components',
            executable='component_container',
            output='screen',
            composable_node_descriptions=[
                ComposableNode(
                    package='laser_scan_merger',
                    plugin='util::LaserScanMerger',
                    name='laser_scan_merger_node',
                    parameters=[param_merger],
                ),
            ]
        )
    ])


